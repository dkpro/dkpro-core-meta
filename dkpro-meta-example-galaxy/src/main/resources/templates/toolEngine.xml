<!--
  Licensed to the Technische Universität Darmstadt under one
  or more contributor license agreements. See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership. The Technische Universität Darmstadt
  licenses this file to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<tool xmlns:gsp='http://groovy.codehaus.org/2005/gsp' id="${engine.name}" name="${engine.name}" >
  <gsp:scriptlet>
    import org.jsoup.Jsoup;
    import groovy.util.*;
    
    def html2text(html) {
      return html ? Jsoup.parse(html).text() : "";
    }

    def paramDecls = engine.spec.metaData.configurationParameterDeclarations
        .configurationParameters.sort { it.name };
    
    // Construct parameter list
    StringBuilder sb = new StringBuilder("\n");
    paramDecls.each { param ->
      sb.append("#if \$${param.name}\n");
      sb.append("-${param.name} \$${param.name}\n");
      sb.append("#end if\n");
    }
  </gsp:scriptlet>
  <command interpreter="groovy"><gsp:expression>"&lt;![CDATA["</gsp:expression>
    ${engine.name}.groovy ${"\"\$input\""} ${"\"\$result\""} ${"\"\$hideOutput\""} ${sb.toString()}
  <gsp:expression>"]]&gt;"</gsp:expression></command>
  <inputs>
    <param name='input' type='data' label="component"/>
    <gsp:scriptlet>      
      def paramValues = engine.spec.metaData.configurationParameterSettings.parameterSettings;
      def typeMap = [ 
        'Boolean': 'boolean',
        'Integer': 'integer',
        'Float':   'float' 
      ];

      paramDecls.each { param ->
        def paramType = typeMap[param.type] ?: 'text';
        def paramValue = ( paramValues.find { it.name == param.name }?.value ) ?: ''; 
	          	
      	if (param.name.toLowerCase().contains('language')) {
        	paramType = 'select';
        } else if (param.name.toLowerCase().contains('modelvariant')) {
       		paramType = 'select';
       	} else if (param.name.toLowerCase().contains('encoding')) {
       		return
       	} else if (param.name.toLowerCase().contains('location')) {
       		return
       	} 
      	</gsp:scriptlet>
        <param 
            name="${param.name}" 
            label="${param.name}" 
            type="${paramType}"
            optional="${!param.mandatory}"
            area="${param.multiValued}"
            value="${paramValue}"
            help="${html2text(param.description)}"> 
            <gsp:scriptlet>
            if (param.name == 'language') {
            	def langs = engine.languages as Set
            	def langVarMap = [] 
          		engine.models.each { model -> 
          			def lang = (model.@language.text())
          			def variant = (model.@variant.text())
          			langs.add(lang)
          			langVarMap.add([lang,variant])
          		} 
          		langs.each { lang ->
			     	</gsp:scriptlet>
			           	<option value="${lang}">$lang</option>
			      	<gsp:scriptlet>
			      	print langVarMap
			     }
           	 } else if (param.name == 'modelVariant') {
           	 	def variants = [] as Set
           			engine.models.each { model -> 
           				variants.add((model.@variant.text()))
           			} 
           			variants.each { variant ->
			     	</gsp:scriptlet>
			           	<option value="${variant}">$variant</option>
			      	<gsp:scriptlet>
			     }
           	 }
  				</gsp:scriptlet>
	        </param>
	    	<gsp:scriptlet>
      }
    </gsp:scriptlet>
    <param name='hideOutput' type='boolean' label="hide logging info" checked="true"/>
  </inputs>
  <outputs>
    <data name='result'/>
  </outputs>
  <help> 
    <![CDATA[${html2text(engine.spec.metaData.description)}]]> 
  </help>
</tool>